{"version":3,"sources":["counter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useState","timeout","interval","reducer","prevState","action","undefined","type","Reducer","React","useReducer","state","dispatch","id","setInterval","console","log","clearInterval","useEffect","Counter","Math","round","Button","childProps","handleClick","aria-label","onClick","random","CounterLite","setState","setTimeout","clearTimeout","style","color","App","className","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yPAqCaA,EAAW,SAACC,EAAiBC,GAAqD,IAAD,EAZpE,SAACD,GACvB,IAAME,EAba,SAACF,GAAD,OACnB,SAACG,EAAkBC,GACf,QAAeC,IAAXD,EACA,OAAOD,EAEX,OAAQC,EAAOE,MACX,IAAK,OACD,OAAOH,EAAY,EACvB,IAAK,QACD,OAAOH,IAIHO,CAAQP,GACxB,OAAOQ,aAAiBN,EAASF,EAASE,GAWhBO,CAAWT,GADqD,mBACnFU,EADmF,KAC5EC,EAD4E,KAG1F,OAXqB,SAACA,EAAoBV,GACnCO,aAAgB,WACnB,IAAMI,EAAKC,aAAY,kBAAMF,EAAS,CAACL,KAAM,WAAUL,GAEvD,OADAa,QAAQC,IAAR,4BAAiCH,IAC1B,kBAAMI,cAAcJ,MAC5B,CAACD,EAAUV,IAKdgB,CAAUN,EAAUV,GACb,CAACS,EAAOC,IAKNO,EAAkC,SAAC,GAAyB,IAAxBlB,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SAAc,EAC1CF,EAASC,EAASC,GADwB,mBAC7DS,EAD6D,KACtDC,EADsD,KAEpE,OACI,gCACI,4CACoBD,EAChB,gBAAC,EAAD,CAAQC,SAAUA,IAClB,4CACeQ,KAAKC,MAAMnB,EAAW,KADrC,UASHoB,EACT,SAAC,GAA+B,IAA9BV,EAA6B,EAA7BA,SAAaW,EAAgB,4BACrBC,EAAcf,eAAkB,kBAAMG,EAAS,CAACL,KAAM,YAAW,CAACK,IACxE,OACI,0CAAWW,EAAX,CAAuBhB,KAAM,SAAUkB,aAAW,aAAaC,QAASF,IAAxE,oBAMNvB,EAAUmB,KAAKC,MAAM,GAAqB,GAAhBD,KAAKO,UAC/BzB,EAAW,IAAsB,IAAhBkB,KAAKO,SAEfC,EAA4B,WAAO,IAAD,EACjBnB,WAAeR,GADE,mBACpCU,EADoC,KAC7BkB,EAD6B,KAc3C,OAXApB,aAAgB,WACZ,KAAIE,GAAS,GAAb,CAGA,IAAME,EAAKiB,YAAW,WAClBD,EAASlB,EAAQ,KAClBT,GAEH,OADAa,QAAQC,IAAR,oBACO,kBAAMe,aAAalB,OAC3B,CAACF,EAAOkB,IAEJ,sBAAIG,MAAO,CAACC,MAAO,WACrBtB,EAAQ,EAAR,kCAAuCA,GAAvC,SC5DMuB,MAzBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,0DACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,CAASlC,QAAS,GAAIC,SAAU,MAChC,mEAGA,uBACEiC,UAAU,WACVC,KAAK,8BACLC,OAAO,SACPC,IAAI,uBAJN,kBCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.af7692cf.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {ReducerWithoutAction} from \"react\";\n\n\nexport type ActionTick = {\n    type: \"tick\",\n}\nexport type ActionReset = {\n    type: \"reset\",\n}\nexport type Action = ActionReset | ActionTick;\nexport type Dispatch = React.Dispatch<Action>;\nexport type Reducer = React.Reducer<State, Action>& ReducerWithoutAction<State>;\nexport const Reducer = (timeout: number): Reducer  =>\n    (prevState: State, action?: Action): State => {\n        if (action === undefined) {\n            return prevState;\n        }\n        switch (action.type) {\n            case \"tick\":\n                return prevState - 1;\n            case \"reset\":\n                return timeout;\n        }\n    };\nexport const useReducer = (timeout: number): [State, Dispatch] => {\n    const reducer = Reducer(timeout);\n    return React.useReducer(reducer, timeout, reducer);\n};\nexport const useEffect = (dispatch: Dispatch, interval: number): void => {\n    return React.useEffect(() => {\n        const id = setInterval(() => dispatch({type: \"tick\"}), interval);\n        console.log(`Interval Created: ${id}`);\n        return () => clearInterval(id);\n    }, [dispatch, interval]);\n};\nexport type State = number;\nexport const useState = (timeout: number, interval: number): ReturnType<typeof useReducer> => {\n    const [state, dispatch] = useReducer(timeout);\n    useEffect(dispatch, interval);\n    return [state, dispatch];\n};\n\nexport type CounterProps = { timeout: number, interval: number };\n\nexport const Counter: React.FC<CounterProps> = ({timeout, interval}) => {\n    const [state, dispatch] = useState(timeout, interval);\n    return (\n        <>\n            <h4>\n                Time to Death: {state}\n                <Button dispatch={dispatch}/>\n                <details>\n                    Interval: {Math.round(interval / 1000)} s.\n                </details>\n            </h4>\n        </>\n    );\n};\n\n\nexport const Button: React.FC<{ dispatch: Dispatch } & Omit<React.HTMLProps<HTMLButtonElement>, \"onClick\">> =\n    ({dispatch, ...childProps}) => {\n        const handleClick = React.useCallback(() => dispatch({type: \"reset\"}), [dispatch]);\n        return (\n            <button{...childProps} type={\"button\"} aria-label=\"GreenPeace\" onClick={handleClick}>\n                Postpone Battle\n            </button>\n        )\n    };\n\nconst timeout = Math.round(30 + Math.random() * 30);\nconst interval = 500 + Math.random() * 500;\n\nexport const CounterLite: React.FC<{}> = () => {\n    const [state, setState] = React.useState(timeout);\n\n    React.useEffect(() => {\n        if (state <= 0) {\n            return;\n        }\n        const id = setTimeout(() => {\n            setState(state - 1);\n        }, interval);\n        console.log(`Timeout Created.`);\n        return () => clearTimeout(id);\n    }, [state, setState]);\n\n    return <h2 style={{color: 'tomato'}}>\n        {state > 0 ? `Nuclear Attack to USSR: ${state}` : `BOOM`}\n    </h2>;\n};\n","import React from 'react';\nimport './App.css';\nimport {Counter, CounterLite} from \"./counter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Make Counters Great Again!</h1>\n        <hr/>\n        <CounterLite/>\n        <hr/>\n        <Counter timeout={20} interval={1000}/>\n        <p>\n          Open application and ruin the world!\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://www.whitehouse.gov/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          White House\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}